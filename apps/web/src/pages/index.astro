---
import "../styles/global.css";
import { Button } from "@/components/ui/button";
import UserProfile from "@/components/UserProfile";

// Check if user is authenticated
const user = Astro.locals.user;
const session = Astro.locals.session;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Music Bridge</title>
		<script is:inline>
			const getThemePreference = () => {
				if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
					return localStorage.getItem("theme");
				}
				return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
			};
			const isDark = getThemePreference() === "dark";
			document.documentElement.classList[isDark ? "add" : "remove"]("dark");

			if (typeof localStorage !== "undefined") {
				const observer = new MutationObserver(() => {
					const isDark = document.documentElement.classList.contains("dark");
					localStorage.setItem("theme", isDark ? "dark" : "light");
				});
				observer.observe(document.documentElement, {
					attributes: true,
					attributeFilter: ["class"],
				});
			}
		</script>
	</head>
	<body>
		<main class="min-h-screen bg-background transition-colors">
			<!-- Dark Mode Toggle - Fixed Position -->
			<div class="fixed top-4 right-4 z-50">
				<Button 
					id="theme-toggle" 
					variant="outline"
					size="icon"
					aria-label="Toggle theme"
					client:load
				>
					<span id="theme-icon" class="w-4 h-4 inline-block">üåô</span>
				</Button>
			</div>

			<div class="container mx-auto px-4 py-8">
				<div class="text-center mb-12">
					<h1 class="text-5xl font-bold text-foreground mb-4">
						üéµ Music Bridge
					</h1>
					<p class="text-xl text-muted-foreground max-w-2xl mx-auto">
						A modern music application built with Astro, React, Tailwind CSS, and Hono API
					</p>
				</div>
				
				<div class="grid md:grid-cols-2 gap-8 max-w-4xl mx-auto">
					<div class="bg-card border border-border rounded-lg shadow-lg p-6 transition-colors">
						<h2 class="text-2xl font-semibold text-card-foreground mb-4">Frontend Tech Stack</h2>
						<ul class="space-y-2 text-muted-foreground">
							<li class="flex items-center">
								<span class="w-2 h-2 bg-blue-500 rounded-full mr-3"></span>
								Astro Framework
							</li>
							<li class="flex items-center">
								<span class="w-2 h-2 bg-cyan-500 rounded-full mr-3"></span>
								React Components
							</li>
							<li class="flex items-center">
								<span class="w-2 h-2 bg-teal-500 rounded-full mr-3"></span>
								Tailwind CSS
							</li>
							<li class="flex items-center">
								<span class="w-2 h-2 bg-indigo-500 rounded-full mr-3"></span>
								TypeScript
							</li>
						</ul>
					</div>

					<div class="bg-card border border-border rounded-lg shadow-lg p-6 transition-colors">
						<h2 class="text-2xl font-semibold text-card-foreground mb-4">Backend Tech Stack</h2>
						<ul class="space-y-2 text-muted-foreground">
							<li class="flex items-center">
								<span class="w-2 h-2 bg-orange-500 rounded-full mr-3"></span>
								Hono Framework
							</li>
							<li class="flex items-center">
								<span class="w-2 h-2 bg-green-500 rounded-full mr-3"></span>
								Node.js Runtime
							</li>
							<li class="flex items-center">
								<span class="w-2 h-2 bg-blue-600 rounded-full mr-3"></span>
								TypeScript
							</li>
							<li class="flex items-center">
								<span class="w-2 h-2 bg-gray-600 rounded-full mr-3"></span>
								Docker Support
							</li>
						</ul>
					</div>
				</div>

				<div class="mt-12 text-center">
					<div class="bg-card border border-border rounded-lg shadow-lg p-8 max-w-2xl mx-auto transition-colors">
						<h2 class="text-2xl font-semibold text-card-foreground mb-6">Backend Connection Test</h2>
						<div id="api-status" class="mb-4">
							<div class="animate-pulse">
								<div class="h-4 bg-muted rounded w-3/4 mx-auto"></div>
							</div>
						</div>
						<Button id="test-api" client:load>
							Test Backend Connection
						</Button>
					</div>
				</div>

				<!-- Authentication Section -->
				<div class="mt-12 text-center">
					{user ? (
						<div class="max-w-md mx-auto">
							<UserProfile user={user} client:load />
							<div class="mt-6">
								<Button asChild>
									<a href="/dashboard">Go to Dashboard</a>
								</Button>
							</div>
						</div>
					) : (
						<div class="bg-card border border-border rounded-lg shadow-lg p-6 max-w-md mx-auto transition-colors">
							<h3 class="text-lg font-semibold text-card-foreground mb-3">üöÄ Ready to get started?</h3>
							<p class="text-muted-foreground text-sm mb-4">
								Sign in to connect your music services and start syncing your playlists.
							</p>
							<div class="space-y-3">
								<Button asChild className="w-full">
									<a href="/login">Sign In / Sign Up</a>
								</Button>
								<Button variant="outline" asChild className="w-full">
									<a href="/test-dashboard">View Demo Dashboard</a>
								</Button>
							</div>
						</div>
					)}
				</div>
			</div>
		</main>

		<script>
			const apiStatusDiv = document.getElementById('api-status');
			const testButton = document.getElementById('test-api');
			const themeToggle = document.getElementById('theme-toggle');
			const themeIcon = document.getElementById('theme-icon');

			// Theme toggle functionality
			function updateThemeIcon() {
				const isDark = document.documentElement.classList.contains('dark');
				if (themeIcon) {
					themeIcon.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
				}
			}

			function toggleTheme() {
				const isDark = document.documentElement.classList.contains('dark');
				document.documentElement.classList.toggle('dark', !isDark);
				updateThemeIcon();
			}

			// Initialize theme icon
			updateThemeIcon();

			// Add theme toggle event listener
			if (themeToggle) {
				themeToggle.addEventListener('click', toggleTheme);
			}

			// API connection test
			async function testApiConnection() {
				try {
					const response = await fetch('http://localhost:8000/api/health');
					const data = await response.json();
					
					if (apiStatusDiv) {
						apiStatusDiv.innerHTML = `
							<div class="p-4 bg-green-100 dark:bg-green-900/20 border border-green-400 dark:border-green-700 text-green-700 dark:text-green-300 rounded">
								‚úÖ Backend Connected! Status: ${data.status} at ${new Date(data.timestamp).toLocaleString()}
							</div>
						`;
					}
				} catch (error) {
					if (apiStatusDiv) {
						apiStatusDiv.innerHTML = `
							<div class="p-4 bg-red-100 dark:bg-red-900/20 border border-red-400 dark:border-red-700 text-red-700 dark:text-red-300 rounded">
								‚ùå Backend Connection Failed: ${error instanceof Error ? error.message : String(error)}
							</div>
						`;
					}
				}
			}

			// Test backend on page load
			testApiConnection();

			// Test backend on button click
			if (testButton) {
				testButton.addEventListener('click', testApiConnection);
			}
		</script>
	</body>
</html>
